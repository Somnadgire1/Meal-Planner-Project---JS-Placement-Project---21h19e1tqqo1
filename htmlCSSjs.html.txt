<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
      integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="stylesheet" href="css/bootstrap.min.css" />
    <link rel="stylesheet" href="styles.css" />
    <script src="App.js" defer></script>
    <title>Meal Planner</title>
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  background: url("https://images.designtrends.com/wp-content/uploads/2016/03/29115235/Abstract-Plain-White-Wallpaper-.jpg");
  background-size: cover;
  font-family: "Poppins", sans-serif;
  display: flex;
  flex-direction: column;
  height: 100vh;
}
.wrapper {
  background-color: rgb(252, 47, 235);
  height: 6rem;
}
.logo img {
  height: 6rem;
  width: 18rem;
}
.col-md-4 input {
    border-radius: 20px;
}
.col-md-4 select{
    border-radius: 20px;
}
.title-meal {
  display: flex;
  justify-content: space-around;
  color: rgb(75, 12, 51);
  font-weight: bold;
  font-size: 20px;
  letter-spacing: 2px;
}
/* Recipe numbering */
ul li {
  margin: 15px;
}
ol li {
  margin: 10px;
}
ul li::before {
  content: "";
  color: gray;
  font-weight: bold;
  display: inline-block;
  width: 1em;
  margin-left: -1.3em;
}
ul li:hover {
  background-color: powderblue;
  transition: background-color .3s;
}

#submitBtn {
  background-color: orangered;
  border: 1px solid green;
  border-radius: 10px;
  width: 10rem;
}

#submitBtn:hover {
  background-color: green;
  border: 1px solid orangered;
  transition: 0.3s;
}
.btn-recipe {
  color: white;
  background-color: rgb(119, 0, 255);
  border: 1px solid rgb(252, 95, 4);
  border-radius: 10px;
  width: 10rem;
}
.card {
  text-align: center;
  border-radius: 20px;
  cursor: pointer;
  margin: 0px 0px 35px 0px;
  padding: 0 0 15px 0px;
  overflow: hidden;
}

.card:hover {
  transform: translate(0, -8px);
  box-shadow: 0 40px 40px rgba(0, 0.3, 0, 0.2);
}

#loader {
  left: 50%;
  top: 50%;
  padding: 15px;
  border: 6px solid rgb(121, 88, 88);
  border-radius: 20px;
  position: absolute;
}

    </style>
  </head>
  <body>
    <div class="wrapper">
      <nav class="logo">
        <img src="./images/mealPlanner-removebg-preview.png" alt="logo" />
      </nav>
    </div>
    <div class="container">
      <div class="mt-3">
        <div class="row">
          <div class="col-md-4">
            <div class="mb-3">
              <input type="text" class="form-control" id="height" maxlength="03" placeholder="Enter Height"/>
            </div>
          </div>
          <div class="col-md-4">
            <div class="mb-3">
              <input type="text" class="form-control" id="weight" maxlength="02" placeholder="Enter Weight"/>
            </div>
          </div>
          <div class="col-md-4">
            <div class="mb-3">
              <input type="text" class="form-control" id="age" maxlength="02" placeholder="Enter Age"/>
            </div>
          </div>
        </div>
        <div class="row d-flex justify-content-center mt-3">
          <div class="col-md-4 mb-4">
            <label for="gender" class="form-label">Choose Gender:</label>
            <select class="form-select" id="gender">
              <option selected value="male">Male</option>
              <option value="female">Female</option>
            </select>
          </div>
          <div class="col-md-4 mb-4">
            <label for="activity" class="form-label"
              >Choose Physical Activity:</label
            >
            <select class="form-select" id="activity">
              <option selected value="light">Light</option>
              <option value="moderate">Moderate</option>
              <option value="active">Active</option>
            </select>
          </div>
        </div>
        <div class="d-flex justify-content-center">
          <button type="submit" id="submitBtn">Generate Meals</button>
        </div>
      </div>
      <div class="mt-5">
        <div id="loader" style="display: none"></div>
        <div class="text-center m-3" id="details"></div>
        <div class="row" id="cards-container"></div>
      </div>
      <div class="mt-5">
        <h1 id="recipe-section" class="text-center"></h1>
        <div class="row">
          <div class="col-lg-4 py-2" id="ingredients"></div>
          <div class="col-lg-4 py-2" id="steps"></div>
          <div class="col-lg-4 py-2" id="equipment"></div>
        </div>
      </div>
    </div>
    <script>
        const heightInput = document.getElementById("height");
const weightInput = document.getElementById("weight");
const ageInput = document.getElementById("age");
const genderInput = document.getElementById("gender");
const activityInput = document.getElementById("activity");
const submit = document.getElementById("submitBtn");
const cardContainer = document.getElementById("cards-container");
const mealsDetails = document.getElementById("details");
const ingredientSection = document.getElementById("ingredients");
const stepsSection = document.getElementById("steps");
const equipmentSection = document.getElementById("equipment");
const recipeSection = document.getElementById("recipe-section");
const API_KEY = "08d3f200ea974b08913e1cbdc042dbf4";

// calori calculation
const getCalorie = () => {
  let hv = heightInput.value;
  let wv = weightInput.value;
  let av = ageInput.value;
  let gv = genderInput.value;
  let avv = activityInput.value;
  let bmr;

  if (hv === "" || hv <= 0 || wv === "" || wv <= 0 || av === "" || av <= 0) {
    alert("Input field must Required");
    return;
  }

  if (gv === "female") {
    //**For women**
    bmr = 655.1 + 9.563 * wv + 1.85 * hv - 4.676 * av;
  } else if (gv === "male") {
    //**For men**
    bmr = 66.47 + 13.75 * wv + 5.003 * hv - 6.755 * av;
  }

  // Daily Calorie Requirement
  if (avv === "light") {
    //**Lightly active (exercise 1–3 days/week)**
    bmr *= 1.375;
  } else if (avv === "moderate") {
    //**Moderately active (exercise 3–5 days/week)**
    bmr *= 1.55;
  } else if (avv === "active") {
    //**Active (exercise 6–7 days/week)**
    bmr *= 1.725;
  }
  getMeals(bmr);
};

const getMeals = async (bmr) => {
  document.getElementById("loader").style.display = "block";
  const url = `https://api.spoonacular.com//mealplanner/generate?timeFrame=day&targetCalories=${bmr}&apiKey=${API_KEY}&includeNutrition=true`;
// console.log(url)
  let datas;
  await fetch(url)
    .then((res) => {
      return res.json();
    })
    .then((data) => {
      datas = data;
    });
  generateMealsCard(datas);
  document.getElementById("loader").style.display = "none";
};

const generateMealsCard = (datas) => {
  let cards = ``;
  mealsDetails.innerHTML = `
    <div class="title-meal">
        <span>BREAKFAST</span>
        <span>LUNCH</span>
        <span>DINER</span>
    </div>
    `;
  datas.meals.map(async (data) => {
    const url = `https://api.spoonacular.com/recipes/${data.id}/information?apiKey=${API_KEY}&includeNutrition=false`;
    // console.log(url)
    let imgURL;
    await fetch(url)
      .then((res) => {
        return res.json();
      })
      .then((data) => {
        imgURL = data.image;
      });
    cards += `
        <div class="col-md-4 d-flex justify-content-center mb-2">
            <div class="card" style="width: 18rem;">
                <img src=${imgURL} class="card-img-top"
                    alt="meal 1">
                <div class="card-body">
                    <h5 class="card-title">${data.title}</h5>
                    <p class="px-2">Calories : ${datas?.nutrients?.calories}</p>
                    <button class="btn-recipe" onClick="btnRecipe(${data.id})" >Get Recipe</button>
                </div>
            </div>
        </div>
        `;
    cardContainer.innerHTML = cards;
  });
};
//fetch recipy
const btnRecipe = async (data) => {
  recipeSection.innerHTML = "";
  ingredientSection.innerHTML = "";
  stepsSection.innerHTML = "";
  equipmentSection.innerHTML = "";
  const url = `https://api.spoonacular.com/recipes/${data}/information?apiKey=${API_KEY}&includeNutrition=false`;
  let information;
  // console.log(url)
  await fetch(url)
    .then((res) => {
      return res.json();
    })
    .then((data) => {
      information = data;
    });
  //title of recipy
  recipeSection.textContent = `${information.title} Recipe`;

  //   Ingridents
  let htmlData = ``;
  let inCardDiv = document.createElement("div");
  inCardDiv.classList.add("carddesign", "card", "h-100");
  let inCardBody = document.createElement("div");
  inCardBody.classList.add("card-body");
  let inOverlay = document.createElement("div");
  inOverlay.classList.add("overlay");
  let ol = document.createElement("ol");
  information.extendedIngredients.map((ingre) => {
    htmlData += `<li>${ingre.original}</li>`;
  });
  ol.innerHTML = htmlData;
  let ingreH1 = document.createElement("h3");
  ingreH1.textContent = "INGREDIENTS";
  inCardBody.appendChild(inOverlay);
  inCardBody.appendChild(ingreH1);
  inCardBody.appendChild(ol);
  inCardDiv.appendChild(inCardBody);
  ingredientSection.appendChild(inCardDiv);

  //   Steps
  let stepsHtml = ``;
  let stCardDiv = document.createElement("div");
  stCardDiv.classList.add("carddesign", "card", "h-100");
  let stCardBody = document.createElement("div");
  stCardBody.classList.add("card-body");
  let stOverlay = document.createElement("div");
  stOverlay.classList.add("overlay");
  let stepsOl = document.createElement("ol");
  information.analyzedInstructions[0].steps.map((step) => {
    stepsHtml += `<li>${step.step}</li>`;
  });
  stepsOl.innerHTML = stepsHtml;
  let stepsH1 = document.createElement("h3");
  stepsH1.textContent = "STEPS";
  stCardBody.appendChild(stOverlay);
  stCardBody.appendChild(stepsH1);
  stCardBody.appendChild(stepsOl);
  stCardDiv.appendChild(stCardBody);
  stepsSection.appendChild(stCardDiv);

  // fetch equipments
  const urlEquip = `https://api.spoonacular.com/recipes/${data}/equipmentWidget.json?apiKey=${API_KEY}&includeNutrition=false`;
  let equip;
  // console.log(urlEquip)
  await fetch(urlEquip)
    .then((res) => {
      return res.json();
    })
    .then((data) => {
      equip = data;
    });

  let equipData = ``;
  let eqCardDiv = document.createElement("div");
  eqCardDiv.classList.add("carddesign", "card", "h-100");
  let eqCardBody = document.createElement("div");
  eqCardBody.classList.add("card-body");
  let eqOverlay = document.createElement("div");
  eqOverlay.classList.add("overlay");
  let equipUl = document.createElement("ol");
  equip.equipment.map((equip) => {
    equipData += `<li>${equip.name}</li>`;
  });
  equipUl.innerHTML = equipData;
  let equipH1 = document.createElement("h3");
  equipH1.textContent = "EQUIPMENT";
  eqCardBody.appendChild(eqOverlay);
  eqCardBody.appendChild(equipH1);
  eqCardBody.appendChild(equipUl);
  eqCardDiv.appendChild(eqCardBody);
  equipmentSection.appendChild(eqCardDiv);
};

submit.addEventListener("click", getCalorie);

    </script>
  </body>
</html>
